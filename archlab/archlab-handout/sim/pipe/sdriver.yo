                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f45003000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f6a802000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f77002000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            |        # Loop header
0x032: c0f2f6ffffffffffffff | 	iaddq $-10,%rdx		# len < 10?
0x03c: 720602000000000000   | 	jl Root			# if so, goto Root:
                            | 
                            | 
0x045: 50a70000000000000000 | Loop1:	mrmovq (%rdi), %r10	# read val from src...
0x04f: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# read val from src...
0x059: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x063: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x065: 717800000000000000   | 	jle Loop2		# if so, goto Loop2:
0x06e: c0f00100000000000000 | 	iaddq $0x1, %rax		# count++
0x078: 50a71000000000000000 | Loop2:	mrmovq 16(%rdi), %r10	# read val from src...
0x082: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# ...and store it to dst
0x08c: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x08e: 71a100000000000000   | 	jle Loop3		# if so, goto Loop3:
0x097: c0f00100000000000000 | 	iaddq $0x1, %rax		# count++
0x0a1: 50b71800000000000000 | Loop3:	mrmovq 24(%rdi), %r11	# read val from src...
0x0ab: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x0b5: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0b7: 71ca00000000000000   | 	jle Loop4		# if so, goto Loop4:
0x0c0: c0f00100000000000000 | 	iaddq $0x1, %rax		# count++
0x0ca: 50a72000000000000000 | Loop4:	mrmovq 32(%rdi), %r10	# read val from src...
0x0d4: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)	# ...and store it to dst
0x0de: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x0e0: 71f300000000000000   | 	jle Loop5		# if so, goto Loop5:
0x0e9: c0f00100000000000000 | 	iaddq $0x1, %rax		# count++
0x0f3: 50b72800000000000000 | Loop5:	mrmovq 40(%rdi), %r11	# read val from src...
0x0fd: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)	# ...and store it to dst
0x107: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x109: 711c01000000000000   | 	jle Loop6		# if so, goto Loop6:
0x112: c0f00100000000000000 | 	iaddq $0x1, %rax		# count++
0x11c: 50a73000000000000000 | Loop6:	mrmovq 48(%rdi), %r10	# read val from src...
0x126: 40b62800000000000000 | 	rmmovq %r11, 40(%rsi)	# ...and store it to dst
0x130: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x132: 714501000000000000   | 	jle Loop7		# if so, goto Loop7:
0x13b: c0f00100000000000000 | 	iaddq $0x1, %rax		# count++
0x145: 50b73800000000000000 | Loop7:	mrmovq 56(%rdi), %r11	# read val from src...
0x14f: 40a63000000000000000 | 	rmmovq %r10, 48(%rsi)	# ...and store it to dst
0x159: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x15b: 716e01000000000000   | 	jle Loop8		# if so, goto Loop8:
0x164: c0f00100000000000000 | 	iaddq $0x1, %rax		# count++
0x16e: 50a74000000000000000 | Loop8:	mrmovq 64(%rdi), %r10	# read val from src...
0x178: 40b63800000000000000 | 	rmmovq %r11, 56(%rsi)	# ...and store it to dst
0x182: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x184: 719701000000000000   | 	jle Loop9		# if so, goto Loop9:
0x18d: c0f00100000000000000 | 	iaddq $0x1, %rax		# count++
0x197: 50b74800000000000000 | Loop9:	mrmovq 72(%rdi), %r11	# read val from src...
0x1a1: 40a64000000000000000 | 	rmmovq %r10, 64(%rsi)	# ...and store it to dst
0x1ab: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x1ad: 71c001000000000000   | 	jle Loop10		# if so, goto Loop10:
0x1b6: c0f00100000000000000 | 	iaddq $0x1, %rax		# count++
0x1c0:                      | Loop10:	#mrmovq 64(%rdi), %r10	# read val from src...
0x1c0: 40b64800000000000000 | 	rmmovq %r11, 72(%rsi)	# ...and store it to dst
0x1ca: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x1cc: 71df01000000000000   | 	jle Loop		# if so, goto Loop:
0x1d5: c0f00100000000000000 | 	iaddq $0x1, %rax		# count++
0x1df:                      | Loop:
0x1df: c0f75000000000000000 | 	iaddq $0x50, %rdi	# src++
0x1e9: c0f65000000000000000 | 	iaddq $0x50, %rsi	# dst++
0x1f3: c0f2f6ffffffffffffff | 	iaddq $-10,%rdx		# len >= 10?
0x1fd: 754500000000000000   | 	jge Loop1		# if so, goto Loop1:
0x206:                      | Root:
0x206: c0f20a00000000000000 |         iaddq $10,%rdx
0x210: 6222                 | 	andq %rdx,%rdx
0x212: 736b02000000000000   | 	je Done
0x21b:                      | Ex:     
0x21b: 50a70000000000000000 |         mrmovq (%rdi), %r10     # read val from src...
0x225: 40a60000000000000000 |         rmmovq %r10, (%rsi)     # ...and store it to dst
0x22f: 62aa                 |         andq %r10, %r10         # val <= 0?
0x231: 714402000000000000   |         jle En                  # if so, goto En:
0x23a: c0f00100000000000000 |         iaddq $1, %rax          # count++
0x244:                      | En:
0x244: c0f70800000000000000 |         iaddq $8, %rdi          # src++
0x24e: c0f60800000000000000 |         iaddq $8, %rsi          # dst++
0x258: c0f2ffffffffffffffff |         iaddq $-1, %rdx         # len--
0x262: 761b02000000000000   |         jg Ex                 # if so, goto Ex:不满足就直接退出
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x26b:                      | Done:
0x26b: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x26c:                      | End:
                            | #/* $end ncopy-ys */
0x26c:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x270:                      | 	.align 8
0x270:                      | src:
0x270: ffffffffffffffff     | 	.quad -1
0x278: 0200000000000000     | 	.quad 2
0x280: fdffffffffffffff     | 	.quad -3
0x288: 0400000000000000     | 	.quad 4
0x290: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x2a0:                      | 	.align 16
0x2a0:                      | Predest:
0x2a0: fadebc0000000000     | 	.quad 0xbcdefa
0x2a8:                      | dest:
0x2a8: abefcd0000000000     | 	.quad 0xcdefab
0x2b0: abefcd0000000000     | 	.quad 0xcdefab
0x2b8: abefcd0000000000     | 	.quad 0xcdefab
0x2c0: abefcd0000000000     | 	.quad 0xcdefab
0x2c8:                      | Postdest:
0x2c8: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x2d0:                      | .align 8
                            | # Run time stack
0x2d0: 0000000000000000     | 	.quad 0
0x2d8: 0000000000000000     | 	.quad 0
0x2e0: 0000000000000000     | 	.quad 0
0x2e8: 0000000000000000     | 	.quad 0
0x2f0: 0000000000000000     | 	.quad 0
0x2f8: 0000000000000000     | 	.quad 0
0x300: 0000000000000000     | 	.quad 0
0x308: 0000000000000000     | 	.quad 0
0x310: 0000000000000000     | 	.quad 0
0x318: 0000000000000000     | 	.quad 0
0x320: 0000000000000000     | 	.quad 0
0x328: 0000000000000000     | 	.quad 0
0x330: 0000000000000000     | 	.quad 0
0x338: 0000000000000000     | 	.quad 0
0x340: 0000000000000000     | 	.quad 0
0x348: 0000000000000000     | 	.quad 0
                            | 
0x350:                      | Stack:
